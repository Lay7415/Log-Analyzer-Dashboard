# streamlit/dashboard.py

import streamlit as st
import pandas as pd
from clickhouse_driver import Client
import plotly.express as px
import pycountry_convert as pc

st.set_page_config(page_title="Real-Time Log Dashboard", layout="wide")
CLIENT = Client(host='clickhouse', port=9000)

def run_query(query):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ ClickHouse –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    try:
        data, columns = CLIENT.execute(query, with_column_types=True)
        column_names = [col[0] for col in columns]
        return data, column_names
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞:")
        st.code(query)
        st.error(e)
        return [], []

def get_country_iso_alpha3(country_name):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ ISO Alpha-3 –∫–æ–¥ –¥–ª—è –∫–∞—Ä—Ç—ã."""
    try:
        return pc.country_name_to_country_alpha3(country_name)
    except:
        return None

st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

if st.sidebar.button('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
    st.rerun()

statuses_data, _ = run_query("SELECT DISTINCT status FROM nginx_logs ORDER BY status")
countries_data, _ = run_query("SELECT DISTINCT country FROM nginx_logs WHERE country IS NOT NULL AND country != 'Unknown' AND country != 'Error' ORDER BY country")
all_statuses = [s[0] for s in statuses_data]
all_countries = [c[0] for c in countries_data]

selected_statuses = st.sidebar.multiselect("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞", all_statuses, default=all_statuses)
selected_countries = st.sidebar.multiselect("–°—Ç—Ä–∞–Ω–∞", all_countries, default=all_countries)

where_clauses = []
if selected_statuses:
    where_clauses.append(f"status IN {tuple(selected_statuses) if len(selected_statuses) > 1 else f'({selected_statuses[0]})'}")
if selected_countries:
    if len(selected_countries) > 1:
        where_clauses.append(f"country IN {tuple(selected_countries)}")
    else:
        where_clauses.append(f"country IN ('{selected_countries[0]}')")

where_sql = " AND ".join(where_clauses)
if where_sql:
    where_sql = "WHERE " + where_sql

st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")

kpi_query = f"""
SELECT
    count() as total,
    uniq(ip) as unique_ips,
    (countIf(status >= 400) / toFloat64(countIf(true))) * 100 as error_rate
FROM nginx_logs {where_sql}
"""
kpi_data, _ = run_query(kpi_query)
total_requests, unique_ips, error_rate = kpi_data[0] if kpi_data and kpi_data[0][2] is not None else (0, 0, 0.0)
kpi1, kpi2, kpi3 = st.columns(3)
kpi1.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", f"{total_requests:,}")
kpi2.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ (IP)", f"{unique_ips:,}")
kpi3.metric("–£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ (%)", f"{error_rate:.2f}%")
st.markdown("---")


tab1, tab2, tab3, tab4 = st.tabs(["üìà –û–±–∑–æ—Ä –∏ –¥–∏–Ω–∞–º–∏–∫–∞", "üåç –ì–µ–æ-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—à–∏–±–∫–∏", "üö® –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π", "üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤"])

with tab1:
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –º–∏–Ω—É—Ç–∞–º")
    time_series_query = f"""
    SELECT
        toStartOfMinute(timestamp) as minute,
        count() as total_requests,
        countIf(status >= 400) as error_requests
    FROM nginx_logs
    {where_sql}
    GROUP BY minute
    ORDER BY minute
    """
    time_data, time_cols = run_query(time_series_query)
    if time_data:
        df_time = pd.DataFrame(time_data, columns=time_cols)
        df_time = df_time.set_index('minute')
        st.line_chart(df_time)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏.")

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–¢–æ–ø 10 —Å—Ç—Ä–∞–Ω–∏—Ü")
        pages_data, pages_cols = run_query(f"SELECT request, count() AS hits FROM nginx_logs {where_sql} GROUP BY request ORDER BY hits DESC LIMIT 10")
        if pages_data:
            df_pages = pd.DataFrame(pages_data, columns=pages_cols).set_index('request')
            st.bar_chart(df_pages)

    with col2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
        status_data, status_cols = run_query(f"SELECT status, count() AS cnt FROM nginx_logs {where_sql} GROUP BY status ORDER BY status")
        if status_data:
            df_status = pd.DataFrame(status_data, columns=status_cols)
            fig = px.pie(df_status, names='status', values='cnt', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–∞')
            st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.subheader("–ö–∞—Ä—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
    country_query = f"SELECT country, count() as cnt FROM nginx_logs {where_sql} GROUP BY country"
    country_data, country_cols = run_query(country_query)

    if country_data:
        df_country = pd.DataFrame(country_data, columns=country_cols)
        df_country['iso_alpha'] = df_country['country'].apply(get_country_iso_alpha3)
        df_country = df_country.dropna(subset=['iso_alpha']) # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏

        fig = px.choropleth(df_country,
                            locations="iso_alpha",
                            color="cnt",
                            hover_name="country",
                            color_continuous_scale=px.colors.sequential.Plasma,
                            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.")

    st.subheader("–¢–æ–ø 10 —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–æ–π 404 (Not Found)")
    error_404_query = f"""
    SELECT request, count() as count
    FROM nginx_logs
    {'WHERE status = 404' if not where_sql else where_sql + ' AND status = 404'}
    GROUP BY request
    ORDER BY count DESC
    LIMIT 10
    """
    error_data, error_cols = run_query(error_404_query)
    if error_data:
        df_errors = pd.DataFrame(error_data, columns=error_cols)
        st.dataframe(df_errors, use_container_width=True)
    else:
        st.info("–°—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–æ–π 404 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

with tab3:
    st.subheader("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)")
    anomaly_query = "SELECT ip, country, max(timestamp) as last_seen, count() as request_count FROM nginx_logs WHERE is_anomaly = 1 GROUP BY ip, country ORDER BY last_seen DESC LIMIT 20"
    anomaly_data, anomaly_cols = run_query(anomaly_query)
    if anomaly_data:
        df_anomalies = pd.DataFrame(anomaly_data, columns=anomaly_cols)
        st.dataframe(df_anomalies, use_container_width=True)
    else:
        st.info("–ê–Ω–æ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")

with tab4:
    st.subheader("üîç –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ (Ad-hoc –∑–∞–ø—Ä–æ—Å—ã)")
    dimensions = {
        '–°—Ç—Ä–∞–Ω–∞': 'country', '–°—Ç—Ä–∞–Ω–∏—Ü–∞': 'request', 'IP-–∞–¥—Ä–µ—Å': 'ip',
        '–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞': 'status', 'User Agent': 'agent'
    }
    metrics = {
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤': 'count()', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP': 'uniq(ip)',
        '–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (bytes)': 'avg(bytes)'
    }

    c1, c2, c3 = st.columns(3)
    with c1:
        selected_dimension = st.selectbox("–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", options=list(dimensions.keys()))
    with c2:
        selected_metric = st.selectbox("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å:", options=list(metrics.keys()))
    with c3:
        limit = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø N:", min_value=5, max_value=50, value=10, step=5)

    if st.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç'):
        dimension_sql = dimensions[selected_dimension]
        metric_sql = metrics[selected_metric]
        
        ad_hoc_query = f"""
        SELECT {dimension_sql} AS dimension, {metric_sql} AS metric
        FROM nginx_logs {where_sql}
        GROUP BY dimension ORDER BY metric DESC LIMIT {limit}
        """
        st.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–∞—à –∑–∞–ø—Ä–æ—Å:")
        st.code(ad_hoc_query, language='sql')
        
        ad_hoc_data, ad_hoc_cols = run_query(ad_hoc_query)
        if ad_hoc_data:
            df_ad_hoc = pd.DataFrame(ad_hoc_data, columns=[selected_dimension, selected_metric])
            st.dataframe(df_ad_hoc, use_container_width=True)
            try:
                st.bar_chart(df_ad_hoc.set_index(selected_dimension))
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")